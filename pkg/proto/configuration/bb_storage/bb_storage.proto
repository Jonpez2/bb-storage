syntax = "proto3";

package buildbarn.configuration.bb_storage;

import "pkg/proto/configuration/auth/auth.proto";
import "pkg/proto/configuration/blobstore/blobstore.proto";
import "pkg/proto/configuration/builder/builder.proto";
import "pkg/proto/configuration/global/global.proto";
import "pkg/proto/configuration/grpc/grpc.proto";

option go_package = "github.com/buildbarn/bb-storage/pkg/proto/configuration/bb_storage";

message ApplicationConfiguration {
  // Blobstore configuration for the Content Addressable Storage (CAS)
  // and Action Cache (AC).
  buildbarn.configuration.blobstore.BlobstoreConfiguration blobstore = 1;

  // Jaeger configuration has moved into 'global'.
  reserved 2;

  // Was 'http_listen_address'. This option has been moved to
  // 'global.diagnostics_http_listen_address'.
  reserved 3;

  // gRPC servers to spawn to listen for requests from clients.
  repeated buildbarn.configuration.grpc.ServerConfiguration grpc_servers = 4;

  // Map of schedulers available capable of running build actions, where
  // the key corresponds to the instance name prefix. In case of
  // multiple matches, the scheduler with the longest matching prefix is
  // used. The matching prefix is removed from the resulting instance
  // name.
  //
  // For example, if schedulers for instance name prefixes "acmecorp"
  // and "acmecorp/rockets" are declared, requests for instance name
  // "acmecorp/rockets/mars" will be forwarded to the latter. This
  // scheduler will receive requests with instance name "mars".
  //
  // The empty string can be used to match all instance names, thereby
  // causing all requests to be forwarded to a single scheduler.
  map<string, buildbarn.configuration.builder.SchedulerConfiguration>
      schedulers = 5;

  // Was 'allow_ac_updates_for_instance_name_prefixes' which is now more
  // flexibly supported by action_cache_authorizers.put.
  reserved 6;

  // Was 'verify_action_result_completeness'. This can now be enabled by
  // using BlobAccessConfiguration.completeness_checking.
  reserved 7;

  // Maximum Protobuf message size to unmarshal.
  int64 maximum_message_size_bytes = 8;

  // Common configuration options that apply to all Buildbarn binaries.
  buildbarn.configuration.global.Configuration global = 9;

  // Optional: Blobstore configuration for the Indirect Content
  // Addressable Storage (ICAS).
  buildbarn.configuration.blobstore.BlobAccessConfiguration
      indirect_content_addressable_storage = 10;

  // Optional: Blobstore configuration for the Initial Size Class Cache
  // (ISCC).
  buildbarn.configuration.blobstore.BlobAccessConfiguration
      initial_size_class_cache = 11;

  // Authorization requirements applied to content addressable storage.
  ScannableAuthorizersConfiguration content_addressable_storage_authorizers =
      12;

  // Authorization requirements applied to indirect content addressable storage.
  ScannableAuthorizersConfiguration
      indirect_content_addressable_storage_authorizers = 13;

  // Authorization requirements applied to the action cache.
  NonScannableAuthorizersConfiguration action_cache_authorizers = 14;

  // Authorization requirements applied to the initial size class cache.
  NonScannableAuthorizersConfiguration initial_size_class_cache_authorizers =
      15;

  // Authorization requirements applied to Execute() requests via schedulers.
  //
  // Note that this does not apply any authorization to WaitExecution() -
  // any scheduler is expected to perform authorization on WaitExecution(),
  // but in bb_storage we can't reliably know the instance name from an
  // operation. This is hopefully safe, as operation names are hard to guess,
  // and the forwarded-to scheduler should perform its own authorization.
  buildbarn.configuration.auth.AuthorizerConfiguration execute_authorizer = 16;

  // File systems to monitor.  This is ignored unless prometheus is enabled
  // in the global config.
  repeated string monitored_file_systems = 17;
}

// Authorizer configuration for interfaces which don't allow
// batch digest scanning.
message NonScannableAuthorizersConfiguration {
  // The authorizer for determining whether a client may read from storage.
  buildbarn.configuration.auth.AuthorizerConfiguration get = 1;

  // The authorizer for determining whether a client may write to storage.
  // For example, in case of the Content Addressable Storage (CAS),
  // it pertains to ByteStream.Write() and BatchUpdateBlobs() operations,
  // while for the Action Cache (AC) it pertains to UpdateActionResult().
  buildbarn.configuration.auth.AuthorizerConfiguration put = 2;
}

// Authorizer configuration for interfaces which allow batch digest scanning.
message ScannableAuthorizersConfiguration {
  // The authorizer for determining whether a client may read from storage.
  buildbarn.configuration.auth.AuthorizerConfiguration get = 1;

  // The authorizer for determining whether a client may write to storage.
  // For example, in case of the Content Addressable Storage (CAS),
  // it pertains to ByteStream.Write() and BatchUpdateBlobs() operations,
  // while for the Action Cache (AC) it pertains to UpdateActionResult().
  buildbarn.configuration.auth.AuthorizerConfiguration put = 2;

  // The authorizer for determining whether a client may scan storage
  // for the existence of a batch of digests.
  buildbarn.configuration.auth.AuthorizerConfiguration find_missing = 3;
}
